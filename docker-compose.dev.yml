services:
  # PostgreSQL Database
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: template_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - ./backend/init.sql:/docker-entrypoint-initdb.d/
      - ./data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        BUILD_VERSION: dev
        BUILD_NUMBER: ${BUILD_NUMBER:-local}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
        ENVIRONMENT: development
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@db:5432/template_db
      - DATABASE_URL_SYNC=postgresql://postgres:postgres@db:5432/template_db
      - ENVIRONMENT=development
      - DEBUG=true
    volumes:
      - ./backend:/app
    depends_on:
      db:
        condition: service_healthy
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      args:
        BUILD_VERSION: dev
        BUILD_NUMBER: ${BUILD_NUMBER:-local}
        GIT_COMMIT: ${GIT_COMMIT:-unknown}
        ENVIRONMENT: development
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    entrypoint: ["sh", "-c"]
    command: ["if [ ! -f '/app/node_modules/.modules.yaml' ]; then echo 'Installing dependencies...' && pnpm install; fi && echo 'Starting development server...' && pnpm dev --host 0.0.0.0"]

volumes:
  postgres_data:
  frontend_node_modules: