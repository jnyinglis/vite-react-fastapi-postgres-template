services:
  # PostgreSQL Database
  db:
    image: postgres:16
    environment:
      POSTGRES_DB: template_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./data/postgres:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    image: ghcr.io/${GITHUB_REPOSITORY}/backend:${IMAGE_TAG:-latest}
    environment:
      - DATABASE_URL=postgresql+asyncpg://postgres:${POSTGRES_PASSWORD}@db:5432/template_db
      - DATABASE_URL_SYNC=postgresql://postgres:${POSTGRES_PASSWORD}@db:5432/template_db
      - ENVIRONMENT=production
      - DEBUG=false
      - SECRET_KEY=${SECRET_KEY}
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      # API routes
      - "traefik.http.routers.backend.rule=Host(`${DOMAIN}`) && PathPrefix(`/api`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true" # added this for cloudflare
      - "traefik.http.routers.backend.tls.certresolver=cfresolver" # changed from letsencrypyt for cloudflare
      # SEO routes (higher priority than frontend catch-all)
      - "traefik.http.routers.backend-seo.rule=Host(`${DOMAIN}`) && (Path(`/robots.txt`) || Path(`/sitemap.xml`) || PathPrefix(`/.well-known`))"
      - "traefik.http.routers.backend-seo.entrypoints=websecure"
      - "traefik.http.routers.backend-seo.tls=true"
      - "traefik.http.routers.backend-seo.tls.certresolver=cfresolver"
      - "traefik.http.routers.backend-seo.priority=100"
      # Service configuration
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  # Frontend
  frontend:
    image: ghcr.io/${GITHUB_REPOSITORY}/frontend:${IMAGE_TAG:-latest}
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true" # added this for cloudflare
      - "traefik.http.routers.frontend.tls.certresolver=cfresolver" # changed from letsencrypyt for cloudflare
      - "traefik.http.services.frontend.loadbalancer.server.port=80"
      - "traefik.http.routers.frontend.tls.domains[0].main=${DOMAIN_BASE}"
      - "traefik.http.routers.frontend.tls.domains[0].sans=*.${DOMAIN_BASE}"

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.0
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      # switch from TLS-ALPN-01 to DNS-01 via Clouflare
      - "--certificatesresolvers.cfresolver.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.cfresolver.acme.storage=/letsencrypt/acme.json"
      - "--certificatesresolvers.cfresolver.acme.dnschallenge.provider=cloudflare"
      # Optional during testing to avoid LE rate limits:
      # - "--certificatesresolvers.cfresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

      # - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
      # - "--certificatesresolvers.letsencrypt.acme.email=${ACME_EMAIL}"
      # - "--certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      # (optional, forward real client IPs from Cloudflare)
      - "--entrypoints.websecure.forwardedheaders.trustedips=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/13,104.24.0.0/14,172.64.0.0/13,131.0.72.0/22"
      - "--global.checknewversion=false"
      - "--global.sendanonymoususage=false"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard
    environment:
      # Use one of these (Traefik/lego supports both). Token must have Zone:DNS:Edit + Zone:Read for your zone
      CF_DNS_API_TOKEN: "${CF_DNS_API_TOKEN}"
      # or: CF_API_TOKEN: "${CF_API_TOKEN}"

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - letsencrypt:/letsencrypt
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=cfresolver"   # <- was letsencrypt
      - "traefik.http.routers.traefik.service=api@internal"
      # (optional) protect dashboard with basic auth middleware (see below)
      # - "traefik.http.middlewares.dash-auth.basicauth.users=admin:$$apr1$$1d...<htpasswd-hash>"
      # - "traefik.http.routers.traefik.middlewares=dash-auth@docker"
networks:
  app-network:
    driver: bridge

volumes:
  letsencrypt:
